/*@*****************************************************************************
*                                                                              *
*   █████╗  ██████╗ ███████╗    ███████╗████████╗██╗   ██╗██████╗ ██╗ ██████╗  *
*  ██╔══██╗██╔═══██╗╚══███╔╝    ██╔════╝╚══██╔══╝██║   ██║██╔══██╗██║██╔═══██╗ *
*  ███████║██║   ██║  ███╔╝     ███████╗   ██║   ██║   ██║██║  ██║██║██║   ██║ *
*  ██╔══██║██║   ██║ ███╔╝      ╚════██║   ██║   ██║   ██║██║  ██║██║██║   ██║ *
*  ██║  ██║╚██████╔╝███████╗    ███████║   ██║   ╚██████╔╝██████╔╝██║╚██████╔╝ *
*  ╚═╝  ╚═╝ ╚═════╝ ╚══════╝    ╚══════╝   ╚═╝    ╚═════╝ ╚═════╝ ╚═╝ ╚═════╝  *
*                                                                              *
* This file is part of AOZ Studio.                                             *
* Copyright (c) AOZ Studio. All rights reserved.                               *
*                                                                              *
* Licensed under the GNU General Public License v3.0.                          *
* More info at: https://choosealicense.com/licenses/gpl-3.0/                   *
* And in the file AOZ_StudioCodeLicense.pdf.                                   *
*                                                                              *
*****************************************************************************@*/
/** @file
 *
 * The AOZ Screen Instruction Set
 * By Francois Lionet
 *
 * Using the new modular language syntax system
 * Program the language with the language.
 *
 * @author FL
 * @date first pushed on 27/10/2019
*/
#noWarning:"instruction_not_implemented"


//
// Initialization
//
{
	this.aoz.moduleScreens = this;
}

Instruction "screen open", _number, _width, _height, _numberOfColors, _pixelMode
{
	#errors
	this.aoz.screenOpen(%_number,%_width,%_height,%_numberOfColors,%_pixelMode);
}
End Instruction

Function "x screen", _screen, _x
{
	#errors
	var s=this.aoz.getScreen(%_screen);
}
End Function( { (%_x-s.position.x)/s.renderScale.x } )
Function "x screen", _x
{
	#errors
}
End Function( { (%_x-this.aoz.currentScreen.position.x)/this.aoz.currentScreen.renderScale.x } )


Function "y screen", _screen, _y
{
	#errors
	var s=this.aoz.getScreen(%_screen);
}
End Function( {(%_y-s.position.y)/s.renderScale.y} )
Function "y screen", _y
{
	#errors
}
End Function( { (%_y-this.aoz.currentScreen.position.y)/this.aoz.currentScreen.renderScale.y} )


Instruction "screen copy", _source, _x1, _y1, _x2, _y2 To _destination, _x3, _y3, _x4, _y4, _mode
{
	#errors
	this.aoz.getScreen(%_source).screenCopy(this.aoz.getScreen(%_destination),%_mode,{x:%_x1,y:%_y1,width:(%_x2)-(%_x1),height:(%_y2)-(%_y1)},{x:%_x3,y:%_y3,width:(%_x4)-(%_x3),height:(%_y4)-(%_y3)});
}
End Instruction
Instruction "screen copy", _source, _x1, _y1, _x2, _y2 To _destination, _x3, _y3, _mode
{
	#errors
	this.aoz.getScreen(%_source).screenCopy(this.aoz.getScreen(%_destination),%_mode,{x:%_x1,y:%_y1,width:(%_x2)-(%_x1),height:(%_y2)-(%_y1)},{x:%_x3,y:%_y3});
}
End Instruction
Instruction "screen copy", _source To _destination, _mode
{
	#errors
	this.aoz.getScreen(%_source).screenCopy(this.aoz.getScreen(%_destination),%_mode);
}
End Instruction

Instruction "screen project", _source, _x1, _y1, _x2, _y2 To _destination, _dx1, _dy1, _dx2, _dy2, _dx3, _dy3, _dx4, _dy4
{
	#errors
	this.aoz.getScreen(%_source).screenProject(%_this.aoz.getScreen(%_destination),%_mode,%_x1,%_y1,%_x2,%_y2,%_dx1,%_dy1,%_dx2,%_dy2,%_dx3,%_dy3,%_dx4,%_dy4);
}
End Instruction

Instruction "screen clone", _number
{
	#errors
	this.aoz.screenClone(%_number);
}
End Instruction

Instruction "screen close", _number
{
	#errors
	this.aoz.screenClose(%_number);
}
End Instruction


Instruction "screen display", _number, _x, _y, _sx, _sy
{
	#errors
	this.aoz.getScreen(%_number).setDisplay({x:%_x,y:%_y,width:%_sx,height:%_sy});
}
End Instruction


Instruction "screen center", _number, _x, _y
{
	#errors
	this.aoz.getScreen(%_number).setCenter(%_x,%_y);
}
End Instruction


Instruction "screen offset", _number, _x, _y
{
	#errors
	this.aoz.getScreen(%_number).setOffset({x:%_x,y:%_y});
}
End Instruction


Instruction "screen to front", _number
{
	#errors
	this.aoz.screensContext.moveToEnd(this.aoz.currentContextName,this.aoz.getScreen(%_number));
}
End Instruction

Instruction "screen to back", _number
{
	#errors
	this.aoz.screensContext.moveToEnd(this.currentContextName,this.aoz.getScreen(%_number));
}
End Instruction


Instruction "screen hide", _number
{
	#errors
	this.aoz.getScreen(%_number).show(false);
}
End Instruction


Instruction "screen show", _number
{
	#errors
	this.aoz.getScreen(%_number).show(true);
}
End Instruction


Instruction "screen swap", _number
{
	#errors
	this.aoz.renderer.screenSwap(%_number);
}
End Instruction


Instruction "screen hotspot", _number, _xSpot, _ySpot
{
	#errors
	this.aoz.getScreen(%_number).setHotspot({%_xSpot,%_ySpot});
}
End Instruction
Instruction "screen hotspot", _number, _spot
{
	#errors
	this.aoz.getScreen(%_number).setHotspot({x:'mask',y:%_spot});
}
End Instruction


Instruction "screen rotate", _number, _angle
{
	#errors
	this.aoz.getScreen(%_number).setAngle(%_angle*this.aoz.degreeRadian);
};
End Instruction
Instruction "screen rotate", _angle
{
	#errors
	this.aoz.currentScreen.setAngle(%_angle*this.aoz.degreeRadian);
};
End Instruction


Instruction "screen skew", _number, _xSkew, _ySkew
{
	#errors
	this.aoz.getScreen(%_number).setSkew({x:%_xSkew,y:%_ySkew});
}
End Instruction
Instruction "screen skew", _xSkew, _ySkew
{
	#errors
	this.aoz.currentScreen.setSkew({x:%_xSkew,y:%_ySkew});
}
End Instruction


Instruction "screen scale", _number, _xScale, _yScale
{
	#errors
	this.aoz.getScreen(%_number).setScale({x:%_xScale,y:%_yScale});
}
End Instruction
Instruction "screen scale", _xScale, _yScale
{
	#errors
	this.aoz.currentScreen.setScale({x:%_xScale,y:%_yScale});
}
End Instruction


Instruction "get palette", _number, _mask
{
	#library
	this.aoz.currentScreen.getPalette(%_number,%_mask);
}
End Instruction


Instruction "cls", _number, _x1, _y1 To _x2, _y2
{
	#errors
	this.aoz.currentScreen.cls(%_number,{x:%_x1,y:%_y1,width:(%_x2)-(%_x1),height:(%_y2)-(%_y1)});
}
End Instruction
Instruction "cls", _number, _x1, _y1, _width, _height
{
	#errors
	this.aoz.currentScreen.cls(%_number,{x:%_x1,y:%_y1,width:%_width,height:%_height});
}
End Instruction
Instruction "cls", _number
{
	#errors
	this.aoz.currentScreen.cls(%_number);
}
End Instruction


Instruction "def scroll", _number, _x1, _y1 To _x2, _y2, _dx, _dy
{
	#errors
	this.aoz.currentScreen.defScroll(%_number,{x:%_x1,y:%_y1,width:(%_x2)-(%_x1),height:(%_y2)-(%_y1)},{x:%_dx,y:%_dy});
}
End Instruction
Instruction "def scroll", _number, _x1, _y1, _width, _height, _dx, _dy
{
	#errors
	this.aoz.currentScreen.defScroll(%_number,{x:%_x1,y:%_y1,width:%_width,height:%_height},{x:%_dx,y:%_dy});
}
End Instruction


Instruction "dual playfield", _screen1, _screen2
{
	#errors
	this.aoz.getScreen(%_screen1).setDualPlayfield(this.aoz.getScreen(%_screen2));
}
End Instruction


Instruction "dual priority", _screen1, _screen2
{
	#errors
	this.aoz.getScreen(%_screen1).setDualPriority(this.aoz.getScreen(%_screen2));
}
End Instruction


Instruction "colour", _number, _value
{
	#errors
	this.aoz.currentScreen.setColour(%_number,%_value);
}
End Instruction

Function "colour", _number, _value
{
	#errors
}
End Function( { this.aoz.currentScreen.getColour(%_number,%_value) } )


Function "phybase", _number
{
	#notimplemented
}
End Function( {0} )


Function "physic", _number
{
	#notimplemented
}
End Function( {0} )


Instruction "autoback", _number
{
	#error
	this.aoz.renderer.autoback(%_number);
}
End Instruction


Instruction "plot", _x, _y, _color
{
	#errors
	this.aoz.currentScreen.plot({x:%_x,y:%_y},%_color);
}
End Instruction


Function "point", _x, _y
{
	#errors
}
End Function( {this.aoz.currentScreen.point({x:%_x,y:%_y})} )


Instruction "draw to", _x, _y
{
	#errors
	this.aoz.currentScreen.drawTo({x:%_x,y:%_y});
}
End Instruction


Instruction "draw", _x1, _y1 To _x2, _y2
{
	#errors
	this.aoz.currentScreen.draw({x:%_x1,y:%_y1,width:(%_x2)-(%_x1),height:(%_y2)-(%_y1)});
}
End Instruction
Instruction "draw", _x1, _y1, _width, _height
{
	#errors
	this.aoz.currentScreen.draw({x:%_x1,y:%_y1,width:%_width,height:%_height});
}
End Instruction


Instruction "ellipse", _x, _y, _radiusX, _radiusY
{
	#errors
	this.aoz.currentScreen.ellipse({x:%_x,y:%_y,width:%_radiusX,height:%_radiusY});
}
End Instruction


Instruction "circle", _x, _y, _radius
{
	#errors
	this.aoz.currentScreen.ellipse({x:%_x,y:%_y,width:%_radius,height:%_radius});
}
End Instruction

Instruction "bar", _x1, _y1 To _x2, _y2
{
	#errors
	this.aoz.currentScreen.bar({x:%_x1,y:%_y1,width:(%_x2)-(%_x1),height:(%_y2)-(%_y1)});
}
End Instruction
Instruction "bar", _x1, _y1, _width, _height
{
	#errors
	this.aoz.currentScreen.bar({x:%_x1,y:%_y1,width:%_width,height:%_height});
}
End Instruction


Instruction "box", _x1, _y1 To _x2, _y2
{
	#errors
	this.aoz.currentScreen.box({x:%_x1,y:%_y1,width:(%_x2)-(%_x1),height:(%_y2)-(%_y1)});
}
End Instruction
Instruction "box", _x1, _y1, _width, _height
{
	#errors
	this.aoz.currentScreen.box({x:%_x1,y:%_y1,width:%_width,height:%_height});
}
End Instruction



Instruction "paint", _x, _y, _color
{
	#notimplemented
}
End Instruction


Instruction "gr locate", _x, _y
{
	#errors
	this.aoz.currentScreen.grLocate({x:%_x,y:%_y});
}
End Instruction


Function "text length", _text$
{
	#errors
}
End Function( {this.aoz.currentScreen.textLength(%_text$)} )



Function "text base"
{
	#errors
}
End Function( {this.aoz.currentScreen.textBase()} )


Instruction "text", _x, _y, _text$, _tags$
{
	#errors
	this.aoz.currentScreen.text({x:%_x,y:%_y},%_text$,%_tags$);
}
End Instruction(e)



Instruction "set paint", _style
{
	#errors
	this.aoz.currentScreen.setPaint(%_style);
}
End Instruction


Instruction "set pattern", _pattern
{
	#errors
	this.aoz.currentScreen.setPattern(%_pattern);
}
End Instruction


Instruction "set line", _pattern
{
	#errors
	this.aoz.currentScreen.setLine(%_pattern);
}
End Instruction


Instruction "ink", _color, _pattern, _number
{
	#errors
	this.aoz.currentScreen.setInk(%_color,%_pattern,%_number);
}
End Instruction


Instruction "gr writing", _style
{
	#errors
	this.aoz.currentScreen.setWriting(%_style);
}
End Instruction


Instruction "clip", _x1, _y1 To _x2, _y2
{
	#errors
	this.aoz.currentScreen.setClip({x:%_x1,y:%_y1,width:(%_x2)-(%_x1),height:(%_y2)-(%_y1)});
}
End Instruction
Instruction "clip", _x1, _y1, _width, _height
{
	#errors
	this.aoz.currentScreen.setClip({x:%_x1,y:%_y1,width:%_width,height:%_height});
}
End Instruction
Instruction "clip"
{
	#errors
	this.aoz.currentScreen.clipOff();
}
End Instruction


Instruction "set tempras", _p1, _p2
{
	#notimplemented
}
End instruction


Instruction "appear", _source To _destination, _pixels, _range
{
	#notimplemented
}
End Instruction


Instruction "zoom", _source, _x1,_y1,_x2, _y2 To _destination, _x3, _y3, _x4, _y4
{
	#notimplemented
}
End Instruction


Instruction "get cblock", _number, _x1, _y1 To _x2, _y2
{
	#errors
	this.aoz.currentScreen.getCBlock(%_number,{x:%_x1,y:%_y1,width:(%_x2)-(%_x1),height:(%_y2)-(%_y1)});
}
End Instruction
Instruction "get cblock", _number, _x, _y, _width, _height
{
	#errors
	this.aoz.currentScreen.getCBlock(%_number,{x:%_x,y:%_y,width:%_width,height:%_height});
}
End Instruction


Instruction "put cblock", _number, _x, _y
{
	#errors
	this.aoz.currentScreen.putCBlock(%_number,{x:%_x,y:%_y});
}
End Instruction


Instruction "del cblock", _number
{
	#errors
	this.aoz.currentScreen.delCBlock(%_number);
}
End Instruction


Instruction "get block", _number, _x1, _y1, _width, _height, _mask
{
	#errors
	this.aoz.currentScreen.getBlock(%_number,{x:%_x1,y:%_y1,width:%_width,height:%_height},%_mask);
}
End Instruction
Instruction "get block", _number, _x1, _y1 To _x2, _y2, _mask
{
	#errors
	this.aoz.currentScreen.getBlock(%_number,{x::%_x1,y:%_y1,width:(%_x2)-(%_x1),height:(%_y2)-(%_y1)},%_mask);
}
End Instruction


Instruction "set block alpha", _number, _alpha
{
	#errors
	this.aoz.currentScreen.setBlockAlpha(%_number,%_alpha);
}
End Instruction


Instruction "put block", _number, _x, _y, _bitplanes, _blittermode
{
	#errors
	this.aoz.currentScreen.putBlock(%_number,{x:%_x,y:%_y},%_bitplanes,%_blittermode);
}
End Instruction


Instruction "del block", _number
{
	#errors
	this.aoz.currentScreen.delBlock(%_number);
}
End Instruction


Instruction "scroll", _number
{
	#errors
	this.aoz.currentScreen.scroll(%_number);
}
End Instruction



Function "xgr"
{
	#errors
}
End Function( {this.aoz.currentScreen.grPosition.x} )


Function "ygr"
{
	 #errors
}
End Function( {this.aoz.currentScreen.grPosition.y} )


Instruction "reserve zone", _number
{
	#errors
	this.aoz.currentScreen.reserveZone(%_number);
}
End Instruction

Instruction "reset zone", _number
{
	#errors
	this.aoz.currentScreen.resetZone(%_number);
}
End Instruction

Function "zone$", _text$, _number
{
	#errors
}
End Function( {this.aoz.currentScreen.currentTextWindow.zone$(%_text$,%_number)} )

Instruction "set zone", _number, _x1, _y1 To _x2, _y2
{
	#errors
	this.aoz.currentScreen.setZone(%_number,{x:%_x1,y:%_y1,width:(%_x2)-(%_x1),height:(%_y2)-(%_y1)});
}
End Instruction
Instruction "set zone", _number, _x1, _y1, _width, _height
{
	#errors
	this.aoz.currentScreen.setZone(%_number,{x:%_x1,y:%_y1,width:%_width,height:%_height});
}
End Instruction


Function "zone", _number, _x, _y
{
	#errors
}
End Function( {this.aoz.currentScreen.zone(%_number,{x:%_x,y:%_y})} )
Function "zone", _x, _y
{
	#errors
}
End Function( {this.aoz.currentScreen.zone(undefined,{x:%_x,y:%_y})} )


Function "hzone", _number, _x, _y
{
	#errors
}
End Function( {this.aoz.getScreen(%_number).hZone({x:%_x,y:%_y})} )
Function "hzone", _x, _y
{
	#errors
}
End Function( {this.aoz.currentScreen.hZone({x:%_x,y:%_y})} )


Function "scin", _number, _x, _y
{
	#inline	 #errors
}
End Function( {this.aoz.screenIn(%_number,{x:%_x,y:%_y})} )
Function "scin", _x, _y
{
	#inline	 #errors
}
End Function( {this.aoz.screenIn(undefined,{x:%_x,y:%_y})} )


Function "mouse screen"
{
	 #errors
}
End Function( {this.aoz.mouseScreen({x:this.aoz.xMouse,y:this.aoz.yMouse})} )


Function "mouse zone"
{
	#errors
}
End Function( {this.aoz.currentScreen.hZone2({x:this.aoz.xMouse,y:this.aoz.yMouse})} )


Function "screen colour", _number
{
	#errors
}
End Function( {this.aoz.getScreen(%_number).numberOfColors} )
Function "screen colour"
{
	#errors
}
End Function( {this.aoz.currentScreen.numberOfColors} )


Function "screen base"
{
	#notimplemented
}
End Function( {0} )


Function "screen width", _number
{
	#errors
}
End Function( {this.aoz.getScreen(%_number).dimension.width} )
Function "screen width"
{
	#errors
}
End Function( {this.aoz.currentScreen.dimension.width} )


Function "screen height", _number
{
	#errors
}
End Function( {this.aoz.getScreen(%_number).dimension.height} )
Function "screen height"
{
	#errors
}
End Function( {this.aoz.currentScreen.dimension.height} )

Instruction "screen", _number
{
	#errors
	this.aoz.setScreen(%_number);
}
End Instruction
Function "screen"
{
}
End Function( {this.aoz.currentScreen.number} )

Function "hires"
{
}
End Function( {1} )
Function "lowres"
{
}
End Function( {0} )
Function "laced"
{
}
End Function( {2} )
Function "halfbright"
{
}
End Function( {4} )


Function "x hard", _screen, _x
{
	#errors
	var s%COUNT%=this.aoz.getScreen(%_screen);
}
End Function( {(%_x*s%COUNT%.renderScale.x+s%COUNT%.position.x)} )
Function "x hard", _x
{
	#errors
}
End Function( {(%_x*this.aoz.currentScreen.renderScale.x+this.aoz.currentScreen.position.x)} )


Function  "y hard", _screen, _y
{
	#errors
	var s%COUNT%=this.aoz.getScreen(%_screen);
}
End Function( {(%_y*s%COUNT%.renderScale.y+s%COUNT%.position.y)} )
Function  "y hard", _y
{
	#errors
}
End Function( {(%_y*this.aoz.currentScreen.renderScale.y+this.aoz.currentScreen.position.y)} )

Function "alpha", _number
{
	#errors
}
End Function( {this.aoz.currentScreen.getColorAlpha(%_number)} )

Instruction "remap", _color1 To _color2, _x1, _y1 To _x2, _y2
{
	#errors
	this.aoz.currentScreen.remap(%_color1,%_color2,{x:%_x1,y:%_y1,width:(%_x2)-(%_x1),height:(%_y2)-(%_y1)});
}
End Instruction
Instruction "remap", _color1 To _color2, _x1, _y1, _width, _height
{
	#errors
	this.aoz.currentScreen.remap(%_color1,%_color2,{x:%_x1,y:%_y1,width:%_width,height:%_height});
}
End Instruction
Instruction "remap", _color1 To _color2
{
	#errors
	this.aoz.currentScreen.remap(%_color1,%_color2);
}
End Instruction

Function "screen mode"
{
	#notimplemented
}
End Function( {0} )

Instruction "screen hot spot", _x, _y
{
	#errors
	this.aoz.currentScreen.setHotspot({x:%_x,y:%_y});
}
End Instruction
Instruction "screen hot spot", _number, _x, _y
{
	#errors
	this.aoz.getScreen(%_number).setHotspot({x:%_x,y:%_y});
}
End Instruction
Instruction "screen hot spot", _mask
{
	#errors
	this.aoz.currentScreen.setHotspot({x:%_mask,y:"mask"});
}
End Instruction

Instruction "flash off"
{
	#notimplemented
}
End Instruction
Instruction "flash", _number, _string$
{
	#notimplemented
}
End Instruction

Instruction "shift off"
{
	#notimplemented
}
End Instruction

Instruction "shift up", _delay, _first, _last, _flag
{
	#notimplemmented
}
End Instruction
Instruction "shift down", _delay, _first, _last, _flag
{
	#notimplemmented
}
End Instruction

Instruction "fade", _speed, _colour_ist
{
	#notimplemented
}
End Instruction


// SPRITES
//////////////////////////////////////////////////////////////////////////////////////////////
Instruction "get sprite", _number, _x1, _y1 To _x2, _y2, _tags
{
	#errors
	this.aoz.currentScreen.getImage('images',%_number,{x:%_x1,y:%_y1,width:(%_x2)-(%_x1),height:(%_y2)-(%_y1)},%_tags);
}
End Instruction
Instruction "get sprite", _screenNumber, _number, _x1, _y1 To _x2, _y2, _tags
{
	#errors
	this.aoz.getScreen(%_screenNumber).getImage('images',%_number,{x:%_x1,y:%_y1,width:(%_x2)-(%_x1),height:(%_y2)-(%_y1)},%_tags);
}
End Instruction
Instruction "get sprite", _number, _x1, _y1, _width, _height, _tags
{
	#errors
	this.aoz.currentScreen.getImage('images',%_number,{x:%_x1,y:%_y1,width:%_width,height:%_height},%_tags);
}
End Instruction
Instruction "get sprite", _screenNumber, _number, _x1, _y1, _width, _height, _tags
{
	#errors
	this.aoz.getScreen(%_screenNumber).getImage('images',%_number,{x:%_x1,y:%_y1,width:%_width,height:%_height},%_tags);
}
End Instruction
Instruction "get sprite palette", _mask
{
	#errors
	this.aoz.currentScreen.getImagePalette('images',%_mask);
}
End Instruction

// BOBS
//////////////////////////////////////////////////////////////////////////////////////////////
Instruction "get bob", _number, _x1, _y1 To _x2, _y2, _tags
{
	#errors
	this.aoz.currentScreen.getImage('images',%_number,{x:%_x1,y:%_y1,width:(%_x2)-(%_x1),height:(%_y2)-(%_y1)},%_tags);
}
End Instruction
Instruction "get bob", _screenNumber, _number, _x1, _y1 To _x2, _y2, _tags
{
	#errors
	this.aoz.getScreen(%_screenNumber).getImage('images',%_number,{x:%_x1,y:%_y1,width:(%_x2)-(%_x1),height:(%_y2)-(%_y1)},%_tags);
}
End Instruction
Instruction "get bob", _number, _x1, _y1, _width, _height, _tags
{
	#errors
	this.aoz.currentScreen.getImage('images',%_number,{x:%_x1,y:%_y1,width:%_width,height:%_height},%_tags);
}
End Instruction
Instruction "get bob", _screenNumber, _number, _x1, _y1, _width, _height, _tags
{
	#errors
	this.aoz.getScreen(%_screenNumber).getImage('images',%_number,{x:%_x1,y:%_y1,width:%_width,height:%_height},%_tags);
}
End Instruction
Instruction "get bob palette", _mask
{
	#errors
	this.aoz.currentScreen.getImagePalette('images',%_mask);
}
End Instruction


// ICONS
//////////////////////////////////////////////////////////////////////////////////////////////
Instruction "get icon", _number, _x1, _y1 To _x2, _y2, _tags
{
	#errors
	this.aoz.currentScreen.getImage('icons',%_number,{x:%_x1,y:%_y1,width:(%_x2)-(%_x1),height:(%_y2)-(%_y1)},%_tags);
}
End Instruction
Instruction "get icon", _screenNumber, _number, _x1, _y1 To _x2, _y2, _tags
{
	#errors
	this.aoz.getScreen(%_screenNumber).getImage('icons',%_number,{x:%_x1,y:%_y1,width:(%_x2)-(%_x1),height:(%_y2)-(%_y1)},%_tags);
}
End Instruction
Instruction "get icon", _number, _x1, _y1, _width, _height, _tags
{
	#errors
	this.aoz.currentScreen.getImage('icons',%_number,{x:%_x1,y:%_y1,width:%_width,height:%_height},%_tags);
}
End Instruction
Instruction "get icon", _screenNumber, _number, _x1, _y1, _width, _height, _tags
{
	#errors
	this.aoz.getScreen(%_screenNumber).getImage('icons',%_number,{x:%_x1,y:%_y1,width:%_width,height:%_height},%_tags);
}
End Instruction
Instruction "get icon palette", _mask
{
	#errors
	this.aoz.currentScreen.getImagePalette('icons',%_mask);
}
End Instruction


/*
Instruction "polyline", x1, y1 [ To x2, y2 ]
Instruction "polyline", x1, y1 [ , width, height ]
{
	#errors
	this.aoz.currentScreen.polyline1({x:%_x1,y:%_y1},%_list);
}
{
	#errors
	this.aoz.currentScreen.polyline2({x:%_x1,y:%_y1},%_list);
}
End Instruction


//	{ token: "polygon", params: [ "I" ], compile: '#function handlePolygon', doError: true },
Instruction "polygon", x1, y1 [ To x2, y2 ]
Instruction "polygon", x1, y1 [ , width, height ]
{
	#errors
	this.aoz.currentScreen.polygon1({x:%_x1,y:%_y1},%_list);
}
{
	#errors
	this.aoz.currentScreen.polygon2({x:%_x1,y:%_y1},%_list);
}
End Instruction
*/
